class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return buildHelper(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1);
    }
    private TreeNode buildHelper(int[] preorder, int preLeft, int preRight, int[] inorder, int inLeft, int inRight) {
        if (preRight < preLeft) {
            return null;
        }
        int rootVal = preorder[preLeft];
        int index = 0;
        for (int i = inLeft; i <= inRight; i++) {
            if (rootVal == inorder[i]) {
                index = i;
                break;
            }
        }
        int preorderLeftEnd = index - inLeft;
        TreeNode root = new TreeNode(rootVal);
        root.left = buildHelper(preorder, preLeft + 1, preLeft + preorderLeftEnd, inorder, inLeft, index - 1);
        root.right = buildHelper(preorder, preLeft + preorderLeftEnd + 1, preRight, inorder, index + 1, inRight);
        return root;
    }
}
